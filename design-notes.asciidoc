= Description
As a story implementer, I would like to quickly create a home for all the
stuff that goes with a story ­­ design notes, random images, scratchpad
writings, test request notes, demo notes, etc. It should be quick and easy to
set up and commit to private Git.

It should be just as quick and easy to close down. When a story is
done/accepted, I'd also like to have any open or untracked files tidied up
without delay. This is also when the whole project should be moved to
..\accepted.

== Features brainstorm (one per line)
* **[x]** strip off "B‐" when followed by 5 or 6 digits
* **[ ]** convert ":" to ... something. Maybe do before whitespace is converted to "‐" and just make it a space.
* **[ ]** 00_TEMPLATE remote should be pull only
* **[ ]** Configure 00_TEMPLATE to refuse pushes and disallow pulls from it
* **[ ]** add configuration for path to template directory
* **[x]** ?? Can I get the input parser to replace a newline with a dash? That would be really nice when copying off the V1 website.
** YES! Works "out of the box"!
* **[ ]** the "sync up" option mentioned above is a simple 'git pull' from 00_TEMPLATE
* **[x]** catch SyntaxError if running stage_crew with Python2. Report it needs Python3.
* **[x]** add verbose option
** if verbose, report what was done, like "created directory 123456‐my‐shiny‐new‐story‐dir"; else no output
* **[x]** catch OSError if a directory already exists (reported as file exists)
* **[ ]** add an interactive option, so I can walk thru creating everything if needed
** I was originally thinking this would be useful for shortening/changing the directory name, but was also thinking of just adding an alt option, as in ‐‐alt "shorter name"
** the alt option should be smart enough to reuse the story ID
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]** investigate using GitHub gists for test requests
* **[ ]** investigate using GitHub gists for team documentation
* **[ ]** investigate using GitHub gists for other documentation (release * notes, etc.)
** This would be a move *away* from using Word docs (yay!).
** Also recall that GitHub works just fine with AsciiDoc. It's better than that in fact, since they drove the development and adoption of AsciiDoctor.
* **[x]** directories always start with 5 or 6 digit V1 ID
* **[x]** replace whitespace with dashes
* **[x]** replace multiple consecutive whitespace with a single dash
* **[x]** trim trailing whitespace
* **[ ]** (see **^1** below) empty first commit with timestamp at epoch
** See 04_GIT.md
* **[ ]** Use argparse to accept title on the command line
** Will probably have to wrap the whole thing in double quotes
* **[ ]** (see **^2** below) enable format pretty and other config settings
* **[ ]** clone template repo into the new story dir
** alternatively, set up a remote as in 'git remote add template <template_URL>' and pull
** Actually, do both. But call this remote 00_TEMPLATE or whatever. Remote origin should be at COF GitHub.
* **[ ]** hard­code path to the template files directory
* **[ ]** add configuration to set the template files directory
* **[ ]** consider a "sync up" option to push new template files to current story dirs
* **[ ]** consider versioning the template files, either collectively or individually
* **[ ]** hard­code path to base directory where new directories go
* **[ ]** add configuration to set the base directory
* **[ ]** add non­interactive option to create story directory
* **[ ]** initialize new Git repo in new story directory
* **[x]** get an account on Git enterprise
* **[ ]** set up a remote to Git enterprise (origin)
* **[ ]** push the story bits to the remote
* **[ ]** directory naming: lowercase all words
* **[ ]** directory naming: remove 'a', 'the', maybe others
* **[ ]** consider adding full story title for Git commit log
* **[ ]** consider a STATUS file instead of moving things to accepted/
* **[ ]** consider an IGNORE option for template files (modeled after .gitignore?)
* **[ ]** Rename V1_ID­Story_Title­DESIGN.docx after repo initialized
* **[ ]** Rename V1_ID­Story_Title­qa­checklist.md after repo initialized
* **[ ]** Rename V1_ID­Story_Title­RELEASE_NOTES.docx after repo initialized
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**
* **[ ]**


=== Footnotes
* **^1**<br>Y:\Repositories\VersionOne\stories\546260­propagate­token­descriptions>git init && git commit ­­allow­empty ­m "Initial commit" ­­date 1970­01­01T00:00:00<br>
Initialized empty Git repository in Y:/Repositories/VersionOne/stories/546260­propagate­tokendescriptions/.git/<br>
[master (root­commit) a43232f] Initial commit
* Original idea from a Reddit post. Went looking and found **[this](http://kevin.deldycke.com/2010/05/initializegit­repositories/)**.  Check the comments.
* Can do before copying anything to that directory or after if that works
* better (just don't 'git add' them yet).

* **^2**<br>Simplest thing to do is steal the config settings from Y:\. Be sure and get format.pretty!



== Feature ideas (free­form)
* What happens when a template file is modified or added?
­ Where is the template stored? I'd assume Git/Github also.
­ If stored in Git (or wherever) how to make it easy to version the set?
­ Auto­commit and sync to active projects?


Unit testing brainstorm
*


