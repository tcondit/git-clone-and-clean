= Description

As a story implementer, I would like to quickly create a home for all the stuff
that goes with a story - design notes, random images, scratchpad writings, test
request notes, demo notes, etc. It should be quick and easy to set up and
commit to private Git.

It should be just as quick and easy to close down. When a story is
done/accepted, I'd also like to have any open or untracked files tidied up
without delay. This is also when the whole project should be moved to
..\accepted.

== Features brainstorm (one per line, not in priority order yet)

[x] strip off "B‐" when followed by 5 or 6 digits

[x] convert ":" to ... something. Maybe do before whitespace is converted to "‐" and just make it a space.

[x] add configuration for path to template directory

[x] ?? Can I get the input parser to replace a newline with a dash? That would be really nice when copying off the V1 website.
* YES! Works "out of the box"!

[x] catch SyntaxError if running stage_crew with Python2. Report it needs Python3.

[x] add verbose option

* if verbose, report what was done, like "created directory 123456‐my‐shiny‐new‐story‐dir"; else no output

[x] catch OSError if a directory already exists (reported as file exists)

[x] directories always start with 5 or 6 digit V1 ID

[x] replace whitespace with dashes

[x] replace multiple consecutive whitespace with a single dash

[x] trim trailing whitespace

[x] get an account on Git enterprise

[x] Use argparse to accept title on the command line

* Will probably have to wrap the whole thing in double quotes

[x] directory naming: lowercase all words

[ ] initialize new Git repo in new story directory

[ ] call 'hub create' to initialize the repo on COF GitHub

[ ] set up a remote to Git enterprise (origin) (can 'hub' do this?)

[ ] push the story bits to the remote

[ ] add configuration to set the base directory

[ ] add non­interactive option to create story directory

[ ] directory naming: remove 'a', 'the', maybe others

[ ] Rename V1_ID­Story_Title­DESIGN.docx after repo initialized

[ ] Rename V1_ID­Story_Title­qa­checklist.md after repo initialized

[ ] Rename V1_ID­Story_Title­RELEASE_NOTES.docx after repo initialized

[ ] Add or rename test request file (should be asciidoc)

[ ] Add or rename release plan file (should be asciidoc)

[ ] add an interactive option, so I can walk thru creating everything if needed

* I was originally thinking this would be useful for shortening/changing the directory name, but was also thinking of just adding an alt option, as in ‐‐alt "shorter name"

[ ] make the alt option reuse the story ID

[ ] 00_TEMPLATE remote should be pull only

[ ] Configure 00_TEMPLATE to refuse pushes and disallow pulls from it

[ ] (see **^1** below) empty first commit with timestamp at epoch

* See 04_GIT.md

[ ] (see **^2** below) enable format pretty and other config settings

[ ] clone template repo into the new story dir

* alternatively, set up a remote as in 'git remote add template <template_URL>' and pull
* Actually, do both. But call this remote 00_TEMPLATE or whatever. Remote origin should be at COF GitHub.

[ ] consider a "sync up" option to push (or pull?) new template files into current story dirs

[ ] consider adding full story title for Git commit log

[ ] consider a STATUS file instead of moving things to accepted/

[ ] consider an IGNORE option for template files (modeled after .gitignore?)

[ ] investigate using GitHub gists for test requests

[ ] investigate using GitHub gists for team documentation

[ ] investigate using GitHub gists for other documentation (release * notes, etc.)

* This would be a move *away* from using Word docs (yay!).
* Also recall that GitHub works just fine with AsciiDoc. It's better than that in fact, since they drove the development and adoption of AsciiDoctor.

[ ] add generated AsciiDoc HTML files to .gitignore

* or better, make it a stable set of files and add it to the template
* e.g., design-notes.asciidoc -> .html
* Note: "external" files should have the V1 ID in the name, but internal files should not
* external: release notes, ...
* internal: design notes, demo notes, test request notes, release plan notes

[ ]

[ ]

[ ]

[ ]

[ ]


=== Footnotes
* **^1**<br>Y:\Repositories\VersionOne\stories\546260­propagate­token­descriptions>git init && git commit ­­allow­empty ­m "Initial commit" ­­date 1970­01­01T00:00:00<br>
Initialized empty Git repository in Y:/Repositories/VersionOne/stories/546260­propagate­tokendescriptions/.git/<br>
[master (root­commit) a43232f] Initial commit
* Original idea from a Reddit post. Went looking and found **[this](http://kevin.deldycke.com/2010/05/initializegit­repositories/)**.  Check the comments.
* Can do before copying anything to that directory or after if that works
* better (just don't 'git add' them yet).

* **^2**<br>Simplest thing to do is steal the config settings from Y:\. Be sure and get format.pretty!



== Feature ideas (free­form)
* What happens when a template file is modified or added?
­ Where is the template stored? I'd assume Git/Github also.
­ If stored in Git (or wherever) how to make it easy to version the set?
­ Auto­commit and sync to active projects?


== Examples
* Local cloning. This was on Windows in a Cygwin environment.

 tcondit@WKW7TCONDIT ~/Repositories/VersionOne/02_IN_PROGRESS
 $ git clone --depth 1 --origin TEMPLATE file:///Y:\\Repositories\\VersionOne\\00_TEMPLATE 645889-401k-dbpkg-automated-deployment
 Cloning into '645889-401k-dbpkg-automated-deployment'...

* Check out the log history. I don't know yet what `(grafted)` means.

 tcondit@WKW7TCONDIT ~/Repositories/VersionOne/02_IN_PROGRESS/645889-401k-dbpkg-automated-deployment
 $ git lg
 * 78b151b - (HEAD, TEMPLATE/master, TEMPLATE/HEAD, master) Remove .gitconfig (use .git/config instead) (4 weeks ago) <Tim Condit>
 * 222fa73 - (grafted) Add a standard title (4 weeks ago) <Tim Condit>

* Here's an earlier one that didn't quite do what I wanted.

 tcondit@WKW7TCONDIT ~/Repositories/VersionOne/02_IN_PROGRESS
 $ git clone --depth 1 --origin TEMPLATE Y:\\Repositories\\VersionOne\\00_TEMPLATE 645889-401k-dbpkg-automated-deployment
 Cloning into '645889-401k-dbpkg-automated-deployment'...
 warning: --depth is ignored in local clones; use file:// instead.
 done.

* Just got `hub` working with Enterprise GitHub for the first time
** NB: I'll probably alias `hub` to `git` like the project page recommends
** NB: Some details redacted -- not sure if it matters

 tcondit@WKW7TCONDIT ~/Repositories/VersionOne/02_IN_PROGRESS
 $ GITHUB_HOST=<my.enterprise.org> hub clone --depth 1 --origin TEMPLATE file:///Y:\\Repositories\\VersionOne\\00_TEMPLATE 645889-401k-dbpkg-automated-deployment
 Cloning into '645889-401k-dbpkg-automated-deployment'...

 tcondit@WKW7TCONDIT ~/Repositories/VersionOne/02_IN_PROGRESS
 $ cd 645889-401k-dbpkg-automated-deployment/

 tcondit@WKW7TCONDIT ~/Repositories/VersionOne/02_IN_PROGRESS/645889-401k-dbpkg-automated-deployment
 $ hub create 645889-401k-dbpkg-automated-deployment
 github.com username: <USERNAME>
 <my.enterprise.org> password for <USERNAME> (never stored): <PASSWORD>
 TEMPLATE        file:///Y:\Repositories\VersionOne\00_TEMPLATE (fetch)
 TEMPLATE        file:///Y:\Repositories\VersionOne\00_TEMPLATE (push)
 created repository: <USERNAME>/645889-401k-dbpkg-automated-deployment

== Unit testing brainstorm
*


